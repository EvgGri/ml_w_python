# =-=-=-=-=-=-=-=-=-=-=- Некоторые полезные операции -=-=-=-=-=-=-=-=-=-=-=-=-=
# Ниже перечислены некоторые вспомогательные операции, включенные в Keras API. Их цель – упростить создание сетей, процесс обучения
# и сохранение промежуточных результатов.

# =-=-=-=-=-=-=-=-=-=-=- Сохранение и загрузка весов и архитектуры модели
# Для сохранения и загрузки архитектуры модели служат следующие функции:

# сохранить в формате JSON
json_string = model.to_json()
# сохранить в формате YAML
yaml_string = model.to_yaml()
# восстановить модель из JSON-файла from keras.models import model_from_json model = model_from_json(json_string)
# восстановить модель из YAML-файла model = model_from_yaml(yaml_string)

# Для сохранения и загрузки параметров модели служат следующие функции:
from keras.models import load_model
# создать HDF5-файл 'my_model.h5'
model.save('my_model.h5')
# удалить существующую модель
del model
# вернуть откомпилированную модель, идентичную исходной
model = load_model('my_model.h5')

# =-=-=-=-=-=-=-=-=-=-=- Обратные вызовы для управления процессом обучения
# Процесс обучения можно остановить, когда показатель качества перестает улучшаться. Для этого служит следующая функция обратного вызова:
keras.callbacks.EarlyStopping(monitor='val_loss', min_delta=0, patience=0, verbose=0, mode='auto')

# Историю потерь можно сохранить, определив такие обратные вызовы:
class LossHistory(keras.callbacks.Callback):
 def on_train_begin(self, logs={}):
   self.losses = []

def on_batch_end(self, batch, logs={}): self.losses.append(logs.get('loss'))
    model = Sequential()
    model.add(Dense(10, input_dim=784, init='uniform')) model.add(Activation('softmax')) model.compile(loss='categorical_crossentropy', optimizer='rmsprop') history = LossHistory()
    model.t(X_train,Y_train, batch_size=128, nb_epoch=20, verbose=0, callbacks=[history])
    print history.losses


# =-=-=-=-=-=-=-=-=-=-=- Контрольные точки

# Контрольная точка – это процесс периодического сохранения мгновенного снимка состояния приложения, так чтобы приложение можно было
# перезапустить с последнего сохраненного состояния в случае отказа. Это бывает полезно при обучении глубоких моделей,
# которое часто занимает длительное время. Состоянием глубокой модели обучения в любой момент времени являются веса,
# вычисленные к этому моменту. Keras сохраняет веса в формате HDF5 (см. https://www.hdfgroup.org/) и предоставляет средства
# сохранения контрольной точки с помощью API обратных вызовов.

# Приведем несколько ситуаций, когда контрольная точка полезна:

# 1. Если требуется перезапускать программу с последней контрольной точки после того, как спотовый инстанс AWS Spot
# (см. http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ how-spot-instances-work.html) или вытесняемая виртуальная машина
# Google (см. https://cloud.google.com/compute/ docs/instances/preemptible) неожиданно остановилась.

# 2. Если требуется остановить обучение, например, для того чтобы проверить модель на тестовых данных, а затем продолжить с
# последней контрольной точки.

# 3. Если требуется сохранять бета­версию (с наилучшим показателем качества, например, потерей на контрольном наборе) модели, обучаемой
# на протяжении нескольких периодов.
