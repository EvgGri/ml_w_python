import pandas as pd
from io import StringIO

csv_data = '''A,B,C,D
            1.0, 2.0, 3.0, 4.0
            5.0, 6.0,, 8.0
            10.0,11.0,12.0,'''

# StringIO позволяет считывать строковое значение, присвоенное переменной csv_data, в объект DataFrame библиотеки pandas так, как будто
# это обычный csv файл
df = pd.read_csv (StringIO (csv_data))
df

# Сколько пустых значений в столбцах
df.isnull().sum()

# Scikit-learn предназначена для работы с массивами NumPy, но можно предварительно обрабатывать в Pandas DataFrame.
# Чтобы получить доступ к базовому массиву NumPy таблицы DataFrame, необходимо использовать атрибут values
df.values

# Удаление столбцов или строк с пропущенными значениями
df.dropna()

# Убираем столбцы в которых есть как минимум 1 пропущенное значение
df.dropna(axis=1)

# Отбросить строки, если только все столбцы содержат NaN
df.dropna(how='all')

# Отбросить строки, если в них менее 4 значений не-NaN (релевантных значений менее 4)
df.dropna(thresh=4)

# Отбросить строки, если в определенных столбцах есть NaN
df.dropna(subset=['C'])

# Интерполяция значений
# Замена средним значением
# Если поменять axis = 0  на axis = 1, то будет вычислено среднее строки
# Другими значениями параметра strategy может быть median или most_frequent
from sklearn.preprocessing import Imputer
imr = Imputer(missing_values = 'NaN', strategy = 'mean', axis = 0)
imr = imr.fit(df)
imputed_data = imr.transform(df.values)
imputed_data

# Imputer - это класс-преобразователь. Для него существует 2 метода, которые используются:
# для извлечения метод fit, для преобразования используется метод transform

# Обработка категориальных данных
# Существует 2 типа категориальных данных: порядковые и номинальные (можно сравнивать и нельзя)

df = pd.DataFrame([
                  ['зеленый', 'М', 10.1, 'класс1'],
                  ['красный', 'L', 13.5, 'класс2'],
                  ['синий', 'XL', 15.3, 'класс1']
                  ])
df.columns = ['цвет','размер','цена','метка']
df
